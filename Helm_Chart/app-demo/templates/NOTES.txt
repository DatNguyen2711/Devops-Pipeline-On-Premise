1. Get the application URL by running these commands:

{{- if .Values.ingress }}
{{- if .Values.ingress.enabled }}
# Ingress is enabled, use the following URL(s) to access the application:
{{- range .Values.ingress.rules }}
http{{ if $.Values.ingress.tls }}s{{ end }}://{{ .host }}{{ range .paths }}{{ .path }}{{ end }}
{{- end }}
{{- end }}
{{- else if eq .Values.frontEnd.service.type "NodePort" }}
# NodePort service is enabled for front-end:
export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "app-demo.frontend.fullname" . }})
export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
echo "Front-end service available at: http://$NODE_IP:$NODE_PORT"

{{- else if eq .Values.backEnd.service.type "NodePort" }}
# NodePort service is enabled for back-end:
export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "app-demo.backend.fullname" . }})
export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
echo "Back-end service available at: http://$NODE_IP:$NODE_PORT"

{{- else if eq .Values.frontEnd.service.type "LoadBalancer" }}
# LoadBalancer service is enabled for front-end:
NOTE: It may take a few minutes for the LoadBalancer IP to be available.
      You can watch the status of by running:
      kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "app-demo.frontend.fullname" . }}
export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "app-demo.frontend.fullname" . }} --template "{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}")
echo "Front-end service available at: http://$SERVICE_IP:{{ .Values.frontEnd.service.port }}"

{{- else if eq .Values.backEnd.service.type "LoadBalancer" }}
# LoadBalancer service is enabled for back-end:
NOTE: It may take a few minutes for the LoadBalancer IP to be available.
      You can watch the status of by running:
      kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "app-demo.backend.fullname" . }}
export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "app-demo.backend.fullname" . }} --template "{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}")
echo "Back-end service available at: http://$SERVICE_IP:{{ .Values.backEnd.service.port }}"

{{- else if eq .Values.frontEnd.service.type "ClusterIP" }}
# ClusterIP service is enabled for front-end:
export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "app-demo.frontend.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
echo "Front-end available locally at: http://127.0.0.1:8080"
kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT

{{- else if eq .Values.backEnd.service.type "ClusterIP" }}
# ClusterIP service is enabled for back-end:
export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "app-demo.backend.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
echo "Back-end available locally at: http://127.0.0.1:8080"
kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}
